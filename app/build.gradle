apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

ext {
  appName = 'Moniker'
  supportVersion = '26.0.1'
}

android {
  compileSdkVersion 26
  buildToolsVersion '26.0.1'

  defaultConfig {
    applicationId 'glass.phil.monzo'

    minSdkVersion 23
    targetSdkVersion 26

    versionCode 1
    versionName '1.0'

    resValue 'string', 'app_name', appName

    buildConfigField 'String', 'CLIENT_ID', stringLiteral(clientId)
    buildConfigField 'String', 'CLIENT_SECRET', stringLiteral(clientSecret)
    buildConfigField 'String', 'REDIRECT_URL', stringLiteral("$redirectScheme://$redirectHost")

    manifestPlaceholders << [
        redirectScheme: redirectScheme,
        redirectHost: redirectHost,
        mapsApiKey: mapsApiKey
    ]
  }

  buildTypes {
    debug {
      applicationIdSuffix '.debug'
    }
  }

  productFlavors {
    main {
      testInstrumentationRunner 'glass.phil.monzo.FunctionalTestRunner'
    }

    instrumented {
      applicationIdSuffix '.instrumented'
      testInstrumentationRunner 'glass.phil.monzo.InstrumentedTestRunner'
    }
  }

  variantFilter {
    // The only release variant we want is mainRelease
    it.setIgnore(it.buildType.name == 'release' && it.flavors[0].name != 'main')
  }

  applicationVariants.all {
    if (flavorName != 'main') {
      resValue 'string', 'app_name', "$appName [${flavorName.capitalize()}]"
    }
  }

  sourceSets {
    test {
      java.srcDir 'src/sharedTest/java'
    }

    androidTest {
      java.srcDir 'src/sharedTest/java'
    }

    androidTestMain {
      setRoot('src/functionalTest')
    }

    androidTestInstrumented {
      setRoot('src/instrumentedTest')
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  packagingOptions {
    exclude 'META-INF/LICENSE'
  }

  lintOptions {
    lintConfig file("$rootDir/lint.xml")
    abortOnError true
    warningsAsErrors true
  }
}

dependencies {
  compile "com.android.support:support-annotations:$supportVersion"
  compile "com.android.support:appcompat-v7:$supportVersion"
  compile "com.android.support:recyclerview-v7:$supportVersion"
  compile "com.android.support:design:$supportVersion"
  compile "com.android.support:customtabs:$supportVersion"
  compile 'com.android.support.constraint:constraint-layout:1.0.2'

  compile 'com.google.android.gms:play-services-maps:11.0.4'

  def daggerVersion = '2.11'
  def daggerCompiler = "com.google.dagger:dagger-compiler:$daggerVersion"
  def daggerAndroidProcessor = "com.google.dagger:dagger-android-processor:$daggerVersion"

  compile "com.google.dagger:dagger:$daggerVersion"
  annotationProcessor daggerCompiler
  compile "com.google.dagger:dagger-android-support:$daggerVersion"
  annotationProcessor daggerAndroidProcessor
  // Prevents warnings at compile time, as the dagger-android artifact makes use of these annotations
  // but does not declare them as a transitive dependency.
  provided 'com.google.errorprone:error_prone_annotations:2.0.12'

  def butterknifeVersion = '8.6.0'
  compile "com.jakewharton:butterknife:$butterknifeVersion"
  annotationProcessor "com.jakewharton:butterknife-compiler:$butterknifeVersion"

  compile 'io.reactivex.rxjava2:rxjava:2.1.1'
  compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
  compile 'com.jakewharton.rxrelay2:rxrelay:2.0.0'

  def retrofitVersion = '2.3.0';
  compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
  compile "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
  compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

  def okhttpVersion = '3.8.1'
  compile "com.squareup.okhttp3:okhttp:$okhttpVersion"

  def moshiVersion = '1.5.0'
  compile "com.squareup.moshi:moshi:$moshiVersion"
  compile "com.squareup.moshi:moshi-adapters:$moshiVersion"

  def autoValue = 'com.google.auto.value:auto-value:1.5'
  def autoValueWith = 'com.gabrielittner.auto.value:auto-value-with:1.0.0'

  provided 'com.jakewharton.auto.value:auto-value-annotations:1.5'
  annotationProcessor autoValue
  annotationProcessor autoValueWith

  def autoValueParcelVersion = '0.2.5'
  compile "com.ryanharter.auto.value:auto-value-parcel-adapter:$autoValueParcelVersion"
  annotationProcessor "com.ryanharter.auto.value:auto-value-parcel:$autoValueParcelVersion"

  def autoMoshiVersion = '0.2.0'
  provided "glass.phil.auto.moshi:auto-moshi-annotations:$autoMoshiVersion"
  annotationProcessor "glass.phil.auto.moshi:auto-moshi-processor:$autoMoshiVersion"

  compile 'com.squareup.sqlbrite2:sqlbrite:2.0.0'

  compile 'com.jakewharton.threetenabp:threetenabp:1.0.5'
  compile 'org.joda:joda-money:0.12'

  def glideVersion = '4.0.0'
  compile "com.github.bumptech.glide:glide:$glideVersion"
  compile "com.github.bumptech.glide:okhttp3-integration:$glideVersion"
  annotationProcessor "com.github.bumptech.glide:compiler:$glideVersion"

  compile 'ca.barrenechea.header-decor:header-decor:0.2.8'

  def junit = 'junit:junit:4.12'
  def assertj = 'org.assertj:assertj-core:2.8.0'
  def mockitoVersion = '2.8.9'
  def mockwebserver = "com.squareup.okhttp3:mockwebserver:$okhttpVersion"

  testCompile junit
  testCompile assertj
  testCompile "org.mockito:mockito-inline:$mockitoVersion"
  testCompile mockwebserver
  testCompile 'org.robolectric:robolectric:3.4.2'

  testAnnotationProcessor autoValue
  testAnnotationProcessor autoValueWith

  androidTestCompile junit
  androidTestCompile assertj

  androidTestAnnotationProcessor autoValue
  androidTestAnnotationProcessor autoValueWith

  androidTestInstrumentedCompile "org.mockito:mockito-android:$mockitoVersion"
  androidTestInstrumentedCompile 'com.android.support.test:runner:0.5'

  def espressoVersion = '2.2.2'
  androidTestMainCompile "com.android.support.test.espresso:espresso-core:$espressoVersion"
  androidTestMainCompile "com.android.support.test.espresso:espresso-intents:$espressoVersion"
  androidTestMainCompile("com.android.support.test.espresso:espresso-contrib:$espressoVersion") {
    transitive false
  }

  androidTestMainCompile mockwebserver
  androidTestMainCompile 'com.squareup.rx.idler:rx2-idler:0.9.0'

  androidTestMainAnnotationProcessor daggerCompiler
  androidTestMainAnnotationProcessor daggerAndroidProcessor
}

configurations.all {
  resolutionStrategy {
    force "com.android.support:support-annotations:$supportVersion"
    force 'com.google.code.findbugs:jsr305:3.0.2'
  }
}

static def stringLiteral(content) { /"$content"/ }
